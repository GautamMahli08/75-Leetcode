class Solution {
public:
    int garbageCollection(vector<string>& garbage, vector<int>& travel) {
   int totalTime = 0;
        int lastMetal = -1, lastPaper = -1, lastGlass = -1;
        
        // Iterate over each house to calculate garbage collection time
        for (int i = 0; i < garbage.size(); i++) {
            totalTime += garbage[i].length(); // Adding the time to collect all garbage in the house
            
            // Check for last occurrences of each type of garbage
            if (garbage[i].find('M') != string::npos) lastMetal = i;
            if (garbage[i].find('P') != string::npos) lastPaper = i;
            if (garbage[i].find('G') != string::npos) lastGlass = i;
        }
        
        // Add travel times for Metal collection
        for (int i = 1; i <= lastMetal; i++) {
            totalTime += travel[i - 1];
        }
        
        // Add travel times for Paper collection
        for (int i = 1; i <= lastPaper; i++) {
            totalTime += travel[i - 1];
        }
        
        // Add travel times for Glass collection
        for (int i = 1; i <= lastGlass; i++) {
            totalTime += travel[i - 1];
        }
        
        return totalTime;
    }
};
